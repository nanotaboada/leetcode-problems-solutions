/*
    Problem
    --------------------------------------------------------------------------------
    724. Find Pivot Index
*/

/*  
    Solution
    --------------------------------------------------------------------------------

    -----------------------------------------------
    | sumRight = 28        | sumLeft = 0          |
    -----------------------------------------------
    | -------------------> | <                    |
    | [ 1, 7, 3, 6, 5, 6 ] | [ 1, 7, 3, 6, 5, 6 ] |
    -----------------------------------------------

    -----------------------------------------------------------------------
    | i |        nums          | sumRight | sumRight == sumLeft | sumLeft |
    -----------------------------------------------------------------------
    | 0 | < i  --------------> | (28 - 1) |      (27 == 0)      | (0 + 1) |
    |   | [ 1, 7, 3, 6, 5, 6 ] |    27    |        False        |    1    |
    -----------------------------------------------------------------------
    | 1 | <--  i  -----------> | (27 - 7) |      (20 == 1)      | (1 + 7) |
    |   | [ 1, 7, 3, 6, 5, 6 ] |    20    |        False        |    8    |
    -----------------------------------------------------------------------
    | 2 | <-----  i  --------> | (20 - 3) |      (17 == 8)      | (8 + 3) |
    |   | [ 1, 7, 3, 6, 5, 6 ] |    17    |        False        |    11   |
    -----------------------------------------------------------------------
    | 3 | <--------  i  -----> | (17 - 6) |      (11 == 11)     |         |
    |   | [ 1, 7, 3, 6, 5, 6 ] |    11    |         True        |         |
    -----------------------------------------------------------------------

    - Runtime 4 ms (Beats 16.18% of users with Java)
    - Memory 45.34 MB (Beats 6.28% of users with Java)
*/

class Solution {
    public int pivotIndex(int[] nums) {
        int sumRight = Arrays.stream(nums).sum();
        int sumLeft = 0;
        for (int i = 0; i < nums.length; i++) {
            sumRight -= nums[i];
            if (sumLeft == sumRight) {
                return i;
            }
            sumLeft += nums[i];
        }
        return -1;
    }
}
